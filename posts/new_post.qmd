---
title: Create a new blog post
author: João Silva
date: '2023-11-29'
categories:
  - Tutorial
description: Tutorial how to create a new post on a quarto blog
comments:
  hypothesis: true
toc: true
toc-location: left
toc-expand: 3
output:
  html_document:
    df-print: paged
image : ../resources/images/new_post.png
---

# Create a new blog post

This document presents how to publish blog post in the [College blog](https://github.com/IPESE/college_blog).

To add posts to the Quarto blog, simply navigate to the "posts" menu. Our blog articles are written in Quarto, a format similar to Markdown. This means you can easily format your posts using simple syntax.

One exciting feature of our blog platform is the ability to include R or Python code chunks directly in your posts. This allows you to showcase data analysis, visualizations, or any other code-related content seamlessly within your articles.

## Setup development environment

You can conveniently edit your posts directly on the [GitHub IDE](https://github.com/IPESE/college_blog/new/main/posts). Simply add a unique name to your file and start writing away.

You can conveniently edit your posts directly on the GitHub IDE. Simply add a unique name to your file and the extension `.qmd` and start writing away.

(And bad news: ChatGPT is not the best tool to ask for markdown code to copy/paste. *But you can always use it to help you with the rules*)

With this setup, you can start writing your blog posts right away. There's no need to spend time [configuring software or tools](new_post2.html).

Keep in mind that you won't be able to preview your posts before deployment. However, you can trust in the robustness of the GitHub platform for managing your content.

For simple markdown (without python or R code for example, you can test it in some online tools like [Dillinger.io](https://dillinger.io/)), 

## Before writing

In the beginning of your document, you should add some settings for how your post will be displayed. 

You might change the title, author, date, categories and description that are self-explanatory. Other options are toc for example that allows you to control how and if the table of contents is displayed or comments to choose the framework that will manage comments in your post.

This is a sample configuration that you can copy to start your post:

```{markdown, eval=F, echo=T}
---
title: Title of your blog
author: Your name
date: 2024-12-24
categories:
  - Your Category
description: Description of your post that will appear in the listing
comments:
  hypothesis: true
toc: true
toc-location: left
toc-expand: 3
image : ../resources/images/sample.png
---
```

## Write in Markdown

You can add titles by starting the line with \# like this:

```         
# Main title
## Secondary title
### Tertiary title
```

You can then add multiple types of data like

1.  Text

2.  Link to a website

    -   `[link to a website](https://www.google.com)`
    -   [link to a website](https://www.google.com)

4.  Bold text

    -   `**bold**`
    -   **bold**

5.  Italic text

    -   `*italic*`
    -   *italic*

6.  Bold and italic text

    -   `***bold italic***`
    -   ***bold italic***

7.  Unordered list *managed with `-` and tabs *:

    -   Main point
        -   secondary point

8.  Ordered list *managed with `1.` or `i.` and tabs *:

    1.  Main point
        i)  secondary point

9.  Tables are also possible:

    ```
    | Aligned to the left | Centered col | Align to right |
    |:--------------------|:------------:|---------------:|
    | Content             |   Content    |        Content |
    | Content             |   Content    |        Content |
    ```

    | Aligned to the left | Centered col | Align to right |
    |:--------------------|:------------:|---------------:|
    | Content             |   Content    |        Content |
    | Content             |   Content    |        Content |

## What about code chunks?

You can also run or display code chunks like this:

```{r, echo=T, eval=F}
    ```{r, echo=T}
    if(!require('reticulate'))
        install.packages("reticulate")
    ```
```
In this example, we are executing code that will install a new package in R. 

Options available for customizing output include:

| Option      | Description                                                                                                                                                                                 |
|:-----------------|:-----------------------------------------------------|
| **eval**    | Evaluate the code chunk (if false, just echos the code into the output).                                                                                                                    |
| **echo**    | Include the source code in output                                                                                                                                                           |
| **output**  | Include the results of executing the code in the output (true, false, or asis to indicate that the output is raw markdown and should not have any of Quarto’s standard enclosing markdown). |
| **warning** | Include warnings in the output.                                                                                                                                                             |
| **error**   | Include errors in the output (note that this implies that errors executing code will not halt processing of the document).                                                                  |
| **include** | Catch all for preventing any output (code or results) from being included (e.g. include: false suppresses all output from the code block).                                                  |

*Also, your chunks with echo=T, if the code-copy is true in this file, will have a copy to clipboard button.*

## Deploy the changes

1. Click on "Commit changes"
2. You can then change the message or leave the default message
3. Leave the option "Commit directly to the main branch"
4. Click on "Commit changes"
5. We have put in place a process that ignores posts where an error is encountered. In the github menu you can click on "Actions" to check the status of the deployment created by your post.
6. Our IT-service will go through any post with an error, fix it and explain what was done to correct it in a section at the bottom of the post.